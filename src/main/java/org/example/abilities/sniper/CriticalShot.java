package org.example.abilities.sniper;

import org.example.abilities.Ability;
import org.example.commands.AttackAbilityCommand;
import org.example.models.Character;

import org.example.abilities.Ability;
import org.example.commands.AttackAbilityCommand;
import org.example.models.Character;
import org.example.utils.Utils;

public class CriticalShot extends Ability {
    public CriticalShot() {
        super("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª", 14, 3);
    }

    @Override
    public void use(Character caster, Character target) {
        int baseDamage = caster.calculateDamage();
        int critDamage = (int) (baseDamage * 2);

        String message = String.format("üí• %s –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª'! %s –ø–æ–ª—É—á–∞–µ—Ç %d –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞!",
                caster.getName(), target.getName(), critDamage);

        Utils.delayedPrint(message);
        new AttackAbilityCommand(caster, target, message, critDamage).execute();
    }
}

